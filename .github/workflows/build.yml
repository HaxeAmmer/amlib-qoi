name: Build (all platforms)

on:
  push:
    branches: [master, dev]
    tags:
      - "v*.*.*"

jobs:
  build:
    env:
      CI_HAXE_VERSION: latest
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
      fail-fast: false
    runs-on: ${{ matrix.os }}
    steps:
    - name: Adjust path (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        if [[ -z "$GITHUB_PATH" ]]; then
            echo "${HOME}/.local/bin" >> $GITHUB_PATH
        fi

    - name: Update apt and install necessary packages (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        if ! command -v sudo &> /dev/null; then
            apt install sudo
        fi
        sudo apt update
        sudo apt-get install -y software-properties-common

    - name: Set up MSVC (Windows)
      if: matrix.os == 'windows-latest'
      uses: ilammy/msvc-dev-cmd@v1

    - name: Fix "link" (Windows)
      if: matrix.os == 'windows-latest'
      shell: bash
      run: |
        # "link" interferes with the MSVC linker
        rm /usr/bin/link

    - name: Install Haxe
      uses: krdlab/setup-haxe@v1
      with:
        haxe-version: ${{env.CI_HAXE_VERSION}}

    - name: Set up ammer-core
      shell: bash
      run: |
        haxelib git ammer-core https://github.com/Aurel300/ammer-core

    - name: Checkout ammer
      uses: actions/checkout@v2
      with:
        repository: "Aurel300/ammer"
        ref: "ammer-core-rewrite"
        path: "ammer"

    - name: Set up ammer
      shell: bash
      run: |
        haxelib dev ammer ammer

    # TODO: configure Hashlink version (Windows uses 1.12, others checkout latest)

    - name: Set up Hashlink haxelib
      shell: bash
      run: |
        haxelib git hashlink https://github.com/HaxeFoundation/hashlink.git master other/haxelib/

    - name: Checkout HashLink (non-Windows)
      if: matrix.os != 'windows-latest'
      uses: actions/checkout@v2
      with:
        repository: "HaxeFoundation/hashlink"
        path: "hashlink"

    - name: Build and install HashLink (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        cd hashlink
        sudo apt-get install libpng-dev
        sudo apt-get install libturbojpeg-dev
        sudo apt-get install libvorbis-dev
        sudo apt-get install libopenal-dev
        sudo apt-get install libsdl2-dev
        sudo apt-get install libmbedtls-dev
        sudo apt-get install libuv1-dev
        make
        sudo make install

        echo CI_HL_INCLUDEPATHS="" >> $GITHUB_ENV
        echo CI_HL_LIBRARYPATHS="" >> $GITHUB_ENV

    - name: Build and install HashLink (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        cd hashlink

        # https://github.com/HaxeFoundation/hashlink/pull/468
        sed -i '' 's/brew "mbedtls"/brew "mbedtls@2"/g' Brewfile
        brew bundle
        brew link mbedtls@2

        make
        sudo make install

        echo CI_HL_INCLUDEPATHS="" >> $GITHUB_ENV
        echo CI_HL_LIBRARYPATHS="" >> $GITHUB_ENV

    - name: Install HashLink (1.12, Windows)
      if: matrix.os == 'windows-latest'
      shell: bash
      run: |
        curl -L https://github.com/HaxeFoundation/hashlink/releases/download/1.12/hl-1.12.0-win.zip -o hashlink.zip
        unzip hashlink.zip
        cd hl-1.12.0-win
        echo "HASHLINK_PATH=`pwd`" >> $GITHUB_ENV
        echo "HASHLINK_PATH_WIN=$(cygpath -w `pwd`)" >> $GITHUB_ENV
        pwd >> $GITHUB_PATH
        echo CI_HL_INCLUDEPATHS="$(cygpath -w `pwd`)\include" >> $GITHUB_ENV
        echo CI_HL_LIBRARYPATHS="$(cygpath -w `pwd`)" >> $GITHUB_ENV

    - name: Set up hxjava
      shell: bash
      run: |
        haxelib --quiet install hxjava

    - name: Set up Java paths (macOS)
      if: matrix.os == 'macos-latest'
      shell: bash
      run: |
        echo CI_JAVA_INCLUDEPATHS="$JAVA_HOME/include;$JAVA_HOME/include/darwin" >> $GITHUB_ENV
        echo CI_JAVA_LIBRARYPATHS="$JAVA_HOME/jre/lib/server" >> $GITHUB_ENV

    - name: Set up Java paths (Linux)
      if: matrix.os == 'ubuntu-latest'
      shell: bash
      run: |
        echo CI_JAVA_INCLUDEPATHS="$JAVA_HOME/include;$JAVA_HOME/include/linux" >> $GITHUB_ENV
        echo CI_JAVA_LIBRARYPATHS="$JAVA_HOME/lib/server" >> $GITHUB_ENV

    - name: Set up Java paths (Windows)
      if: matrix.os == 'windows-latest'
      shell: bash
      run: |
        echo CI_JAVA_INCLUDEPATHS="$JAVA_HOME\include;$JAVA_HOME\include\win32" >> $GITHUB_ENV
        echo CI_JAVA_LIBRARYPATHS="$JAVA_HOME\jre\bin\server;$JAVA_HOME\lib" >> $GITHUB_ENV

    # TODO: configure Lua version
    # TODO: some deps might be unnecessary
    - name: Install Lua and dependencies (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        pip3 install hererocks
        hererocks ~/lua5.3 -l5.3 -rlatest --cflags="-fPIC"
        source ~/lua5.3/bin/activate
        ln -s ~/lua5.3/lib/liblua53.a ~/lua5.3/lib/liblua.a
        luarocks install lrexlib-pcre 2.9.1-1
        luarocks install luv 1.41.1-0
        luarocks install luasocket 3.0rc1-2
        luarocks install luautf8 0.1.3-1
        luarocks install bit32 5.3.5.1-1
        luarocks install hx-lua-simdjson 0.0.1-1

    - name: Install Lua and dependencies (macOS)
      if: matrix.os == 'macos-latest'
      env:
        PCRE_VERSION: 8.44
      run: |
        curl -L https://downloads.sourceforge.net/project/pcre/pcre/$PCRE_VERSION/pcre-$PCRE_VERSION.tar.gz | tar xz
        cd pcre-$PCRE_VERSION
        ./configure --enable-utf8 --enable-pcre8 --enable-pcre16 --enable-pcre32 --enable-unicode-properties --enable-pcregrep-libz --enable-pcregrep-libbz2 --enable-jit
        make && make install
        cd ..
        brew install lua luarocks
        luarocks install lrexlib-pcre 2.9.1-1
        luarocks install luv 1.41.1-0
        luarocks install luasocket 3.0rc1-2
        luarocks install luautf8 0.1.3-1
        luarocks install bit32 5.3.5.1-1
        luarocks install hx-lua-simdjson 0.0.1-1
        mkdir -p ~/lua5.3/bin
        touch ~/lua5.3/bin/activate

    - name: Install Lua (Windows)
      if: matrix.os == 'windows-latest'
      # commit with Windows fix
      uses: leafo/gh-actions-lua@d72f3188c2aa48cb3815b68b9c4c81307cb45ee2
      with:
        luaVersion: 5.3

    - name: Install Luarocks (Windows)
      if: matrix.os == 'windows-latest'
      # unmerged PR with Windows fix
      uses: hishamhm/gh-actions-luarocks@5013277f6f115c27478f18c1f647f8de98390628

    - name: Install Lua dependencies (Windows)
      if: matrix.os == 'windows-latest'
      shell: bash
      run: |
        luarocks install bit32 5.3.5.1-1
        mkdir -p ~/lua5.3/bin
        touch ~/lua5.3/bin/activate

    - name: Set up Lua paths
      shell: bash
      run: |
        source ~/lua5.3/bin/activate
        echo CI_LUA_INCLUDEPATHS=`luarocks config --lua-incdir` >> $GITHUB_ENV
        echo CI_LUA_LIBRARYPATHS=`luarocks config --lua-libdir` >> $GITHUB_ENV

    - name: Checkout repository
      uses: actions/checkout@v2
      with:
        path: "amlib-qoi"
        submodules: recursive

    - name: Bake
      shell: bash
      run: |
        source ~/lua5.3/bin/activate
        cd amlib-qoi/src-haxelib-dev
        haxe \
          -D ammer.hl.includePaths="${{ env.CI_HL_INCLUDEPATHS }}" \
          -D ammer.hl.libraryPaths="${{ env.CI_HL_LIBRARYPATHS }}" \
          ../ci-scripts/build/build-hl.hxml
        haxe \
          -D ammer.java.includePaths="${{ env.CI_JAVA_INCLUDEPATHS }}" \
          -D ammer.java.libraryPaths="${{ env.CI_JAVA_LIBRARYPATHS }}" \
          ../ci-scripts/build/build-java.hxml
        haxe \
          -D ammer.lua.includePaths="${{ env.CI_LUA_INCLUDEPATHS }}" \
          -D ammer.lua.libraryPaths="${{ env.CI_LUA_LIBRARYPATHS }}" \
          ../ci-scripts/build/build-lua.hxml
        haxe ../ci-scripts/build/build-combine.hxml
        mkdir -p "bin/combined/bin-hl"
        mkdir -p "bin/combined/bin-java"
        mkdir -p "bin/combined/bin-lua"
        ../ci-scripts/test-assets/${{ matrix.os }}.sh
        cp -r "../src/format" "bin/combined/."
    - name: Test
      shell: bash
      run: |
        source ~/lua5.3/bin/activate
        cd amlib-qoi/test
        haxelib dev amlib-qoi ../src-haxelib-dev
        ../ci-scripts/test/${{ matrix.os }}.sh

    - name: Prepare release assets
      shell: bash
      run: |
        # create the upload directory
        mkdir assets
        export CI_ASSET_DIRECTORY=`pwd`/assets

        # move the prebuilt binaries
        amlib-qoi/ci-scripts/prepare-assets/${{ matrix.os }}.sh

    - name: Prepare haxelib release
      if: matrix.os == 'ubuntu-latest'
      shell: bash
      run: |
        # move the baked haxelib
        mkdir assets/haxelib
        cp amlib-qoi/haxelib-dist.json assets/haxelib/haxelib.json
        cp amlib-qoi/src-haxelib-dev/extraParams.hxml assets/haxelib/extraParams.hxml
        mv amlib-qoi/src-haxelib-dev/bin/combined assets/haxelib/src
        find assets/haxelib

        # make sure there are no binaries in the library
        # (should not necessary after prepare-assets)
        rm -rf assets/haxelib/src/bin-*

        # create empty directories to download prebuilt assets into
        mkdir -p assets/haxelib/src/bin-hl
        touch assets/haxelib/src/bin-hl/.keep
        mkdir -p assets/haxelib/src/bin-java
        touch assets/haxelib/src/bin-java/.keep
        mkdir -p assets/haxelib/src/bin-lua
        touch assets/haxelib/src/bin-lua/.keep

        # zip the baked haxelib
        cd assets
        zip -r haxelib.zip haxelib
        rm -rf haxelib

    - name: Upload release assets
      uses: softprops/action-gh-release@v1
      if: startsWith(github.ref, 'refs/tags/')
      with:
        files: |
          assets/*

